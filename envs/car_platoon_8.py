import numpy as np

from .environment import Environment

def car_platoon_8():
  A = np.matrix([
  [0, 0,0,   0,0,   0,0,   0,0, 0,0, 0,0, 0,0],
  [0, 0,1,   0,0,   0,0,   0,0, 0,0, 0,0, 0,0],
  [0, 0,0,   0,0,   0,0,   0,0, 0,0, 0,0, 0,0],
  [0, 0,0,   0,1,   0,0,   0,0, 0,0, 0,0, 0,0],
  [0, 0,0,   0,0,   0,0,   0,0, 0,0, 0,0, 0,0],
  [0, 0,0,   0,0,   0,1,   0,0, 0,0, 0,0, 0,0],
  [0, 0,0,   0,0,   0,0,   0,0, 0,0, 0,0, 0,0],
  [0, 0,0,   0,0,   0,0,   0,1, 0,0, 0,0, 0,0],
  [0, 0,0,   0,0,   0,0,   0,0, 0,0, 0,0, 0,0],
  [0, 0,0,   0,0,   0,0,   0,0, 0,1, 0,0, 0,0],
  [0, 0,0,   0,0,   0,0,   0,0, 0,0, 0,0, 0,0],
  [0, 0,0,   0,0,   0,0,   0,0, 0,0, 0,1, 0,0],
  [0, 0,0,   0,0,   0,0,   0,0, 0,0, 0,0, 0,0],
  [0, 0,0,   0,0,   0,0,   0,0, 0,0, 0,0, 0,1],
  [0, 0,0,   0,0,   0,0,   0,0, 0,0, 0,0, 0,0]
  ])
  B = np.matrix([
  [1,   0,   0,   0,   0,   0,   0,   0],
  [0,   0,   0,   0,   0,   0,   0,   0],
  [1,  -1,   0,   0,   0,   0,   0,   0],
  [0,   0,   0,   0,   0,   0,   0,   0],
  [0,   1,  -1,   0,   0,   0,   0,   0],
  [0,   0,   0,   0,   0,   0,   0,   0],
  [0,   0,   1,  -1,   0,   0,   0,   0],
  [0,   0,   0,   0,   0,   0,   0,   0],
  [0,   0,   0,   1,  -1,   0,   0,   0],
  [0,   0,   0,   0,   0,   0,   0,   0],
  [0,   0,   0,   0,   1,  -1,   0,   0],
  [0,   0,   0,   0,   0,   0,   0,   0],
  [0,   0,   0,   0,   0,   1,  -1,   0],
  [0,   0,   0,   0,   0,   0,   0,   0],
  [0,   0,   0,   0,   0,   0,   1,  -1],
  ])

  #intial state space
  s_min = np.array([[ 19.9],[ 0.9], [-0.1], [ 0.9],[-0.1], [ 0.9], [-0.1], [ 0.9], [-0.1], [ 0.9],[-0.1], [ 0.9], [-0.1], [ 0.9], [-0.1]])
  s_max = np.array([[ 20.1],[ 1.1], [ 0.1], [ 1.1],[ 0.1], [ 1.1], [ 0.1], [ 1.1], [ 0.1], [ 1.1],[ 0.1], [ 1.1], [ 0.1], [ 1.1], [ 0.1]])

  x_min = np.array([[18],[0.5],[-1],[0.5],[-1],[0.5],[-1],[0.5],[-1],[0.5],[-1],[0.5],[-1],[0.5],[-1]])
  x_max = np.array([[22],[1.5], [1],[1.5],[ 1],[1.5],[ 1],[1.5], [1],[1.5],[ 1],[1.5],[ 1],[1.5],[ 1]])
  u_min = np.array([[-10.], [-10.], [-10.], [-10.], [-10.], [-10.], [-10.], [-10.]])
  u_max = np.array([[ 10.], [ 10.], [ 10.], [ 10.], [ 10.], [ 10.], [ 10.], [ 10.]])

  target = np.array([[20],[1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0], [1], [0]])

  s_min -= target
  s_max -= target
  x_min -= target
  x_max -= target

  Q = np.zeros((15, 15), float)
  np.fill_diagonal(Q, 1)

  R = np.zeros((8,8), float)
  np.fill_diagonal(R, 1)

  env = Environment(A, B, u_min, u_max, s_min, s_max, x_min, x_max, Q, R, continuous=True, bad_reward=-1000)
  return env